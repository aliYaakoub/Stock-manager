import { DocumentData, DocumentSnapshot } from 'firebase/firestore';
import Head from 'next/head';
import { useRouter } from 'next/router';
import React, { useEffect, useState } from 'react';
import AppButton from '../../components/AppButton';
import AppInput from '../../components/AppInput';
import LoadingAnimation from '../../components/LoadingAnimation';
import NavBar from '../../components/nav';
import { useAppContext } from './../../config/Context';

const EditItem: React.FC = () => {

  const router = useRouter();
  const { getItem, updateItem } = useAppContext();
  const [data, setData] = useState<any>();
  const [loading, setLoading] = useState(true);
  const [err, setErr] = useState(false);
  
  const [itemId, setItemId] = useState('');
  const [brand, setBrand] = useState('');
  const [type, setType] = useState('');
  const [description, setDescription] = useState('');
  const [color, setColor] = useState('');
  const [quantity, setQuantity] = useState('');

  useEffect(()=>{
    let res;
    const getItemDetails = async (id: string | string[]) => {
      if(typeof id === 'string') res = await getItem(id);
      else res = await getItem(id[0]);
      setData(res && {...res.data(), id: res.id});
      setLoading(false);
    }
    if(router.query.id){
      getItemDetails(router.query.id);
    }
  }, [router, getItem]);

  useEffect(()=>{
    if(!data) return;
    console.log(data);
    setItemId(data.itemId);
    setBrand(data.brand);
    setType(data.type);
    setDescription(data.description);
    setColor(data.color);
    setQuantity(data.quantity);
  }, [data]);

  async function handleClick(){
    setErr(false);
    try{
      await updateItem(itemId, brand, type, color, description, parseInt(quantity), data.id);
      router.push('/items');
    }
    catch(err){
      setErr(true);
    }
  }

  return (
    <>
      <Head>
        <title>Edit Item</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <NavBar />
      <div className='min-h-[calc(100vh-5rem)] bg-slate-600 flex items-center justify-center flex-col text-white'>
      {loading ?
          <LoadingAnimation />
          : 
          !data || err ? 
            <div className=''>
              <p className='text-center text-xl'>An error occured, please try again later.</p>
            </div>
            :
            <div className='max-w-2xl w-full bg-slate-500 rounded shadow p-5'>
              <AppInput label='Brand :' placeholder='Brand...' value={brand} onChange={setBrand} />
              <AppInput label='Type :' placeholder='Type...' value={type} onChange={setType} />
              <div className='flex flex-col'>
                <label htmlFor="searchId" className='my-5 text-lg'>Description :</label>
                <textarea
                  id='searchId'
                  value={description}
                  placeholder='Description...'
                  onChange={(e)=>setDescription(e.target.value)}
                  className='px-2 bg-slate-400 py-2 rounded text-black placeholder:text-slate-600 outline-none w-full resize-none'
                />
              </div>
              <AppInput label='Color :' placeholder='Color...' value={color} onChange={setColor} />
              <div className='flex flex-col'>
                <label htmlFor="quantity" className='my-5 text-lg'>Quantity :</label>
                <input
                  min={1}
                  max={10000}
                  id='quantity'
                  type='number'
                  value={quantity}
                  placeholder='Quantity...'
                  onChange={(e)=>setQuantity(e.target.value)}
                  className='px-2 bg-slate-400 py-2 rounded text-black placeholder:text-slate-600 outline-none w-full resize-none'
                />
              </div>
              <AppButton text='Update' disabled={!brand || !type || !description || !color} onClick={handleClick} />
            </div>
        }
      </div>
    </>
  );
};

export default EditItem;